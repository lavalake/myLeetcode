
http://www.ardendertat.com/2012/01/09/programming-interview-questions/
https://leetcode.com/discuss/16669/c-solution-in-place-runtime-o-n-memory-o-1
' ' " " or " \t"??????
Reverse Words in a String
  /*Step 1: Trim whitespace from the beginning and end of the string.

Step 2: Clean up whitespace between words.

Step 3: Reverse each word in the sentence.

Step 4: Reverse the entire sentence.

The idea for both the whitespace cleanup code and the reverse code is two use two indices (or iterators or the like) to look for whitespace and non whitespace characters and handle the group of characters between them accordingly
*/
following use stringstream, but not O(1) space
void reverseWords(string &s) {
        stringstream is(s);
        is >> s;
        string temp;
        while(is >> temp){
            s = temp + " " + s;
        }
        if(s[0] == ' ') s="";
        
    }

Longest Substring Without Repeating Characters
int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> mp;
        int start=0,maxLen=0;
        for(int i=0; i<s.size(); ++i){
            if(mp.count(s[i]) != 0){
                if(mp[s[i]] >= start){
                    maxLen = max(maxLen,i-start);
                    start = mp[s[i]]+1;
                }
            }
            mp[s[i]] = i;
        }
               
        
        return max(maxLen,(int)s.size()-start);
    }

Longest Palindromic Substring
string longestPalindrome(string s) {
       int len = s.size();
       //initialze array
       bool isPal[len][len]={false};
       int maxLen=1,start=0;
       for(int i=0; i<len; ++i){
           //need j<=i becasue the [i][i]
           for(int j=0; j<=i; ++j){
               //note, i-j<2!!!!!!!!
               if(s[i]==s[j] &&(i-j<2 || isPal[j+1][i-1])){
                   isPal[j][i] = true;
                   if(i-j+1>maxLen){
                       maxLen = i-j+1;
                       start=j;
                   }
               }
           }
        
       }
       return s.substr(start,maxLen);
    }


Letter Combinations of a Phone Number
https://leetcode.com/discuss/42518/iterative-c-solution-in-0ms
use swap becasue swap dows not use memcpy
This is iterative version
vector<string> letterCombinations(string digits) {
        const vector<string> converter = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        vector<string> result;
        if(digits.empty())
            return result;
        result.push_back("");
        for(auto d:digits){
            int n = result.size();
            int m = converter[d-'0'].size();
            const string& str = converter[d-'0'];
            if(str.empty())
                continue;
            vector<string> temp;
            
            for(int i=0; i<m; ++i){
                
                for(int j=0; j<n; ++j){
                    temp.push_back(result[j]+str[i]);
                }
            }
            result.swap(temp);
        }
        return result;
    }
    
this is back tracking version or dfs version or recursive version
public:
    vector<string> letterCombinations(string digits) {
        const vector<string> converter = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        vector<string> result;
        if(digits.empty())
            return result;
        string path;
        backTrack(converter, digits, path,result);
        return result;
    }
private:
    void backTrack(const vector<string> &c,const string &digits,string &p,vector<string> &r){
        if(p.size() == digits.size()){
            r.push_back(p);
            return;
        }
        for(int i=0; i<c[digits[p.size()]-'0'].size(); ++i){
            p.push_back(c[digits[p.size()]-'0'][i]);
            backTrack(c,digits,p,r);
            p.pop_back();
        }
            
    }
    

Decode Ways
DP solution
int numDecodings(string s) {
        int len = s.size();
        if(len == 0 || s[0] == '0')
            return 0;
        int r1=1, r2=1;
        for(int i=1; i<len; ++i){
            if(s[i] == '0')
                r1 = 0;
            if(s[i-1]=='1' ||(s[i-1]=='2' && s[i]<='6')){
                r1 = r1+r2;
                r2 = r1 - r2;
            }else{
                r2=r1;
            }
        }
        return r1;
    }
    
subsets
back tracking. 
    public:
    vector<vector<int>> subsets(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        unique(nums.begin(),nums.end());
        vector<vector<int>> result;
        vector<int> set;
        result.push_back(set);
        getSet(nums, 0, set, result);
        return result;
    }
private:
    void getSet(vector<int> &nums, int index, vector<int> &s, vector<vector<int>> &r){
        if(index>nums.size())
            return;
        for(int i=index; i<nums.size(); ++i){
            s.push_back(nums[i]);
            r.push_back(s);
            getSet(nums, i+1, s, r);
            s.pop_back();
        }
    }
    
    
    Search a 2D Matrix 
    1. use binary search to find the row
    2. use binary search to find the col
    public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        int mid;
        int start = 0, end = row-1;
        //not start <= end
        while(start <= end){
            mid = (start+end)/2;
            if(matrix[mid][0]>target)
                end = mid - 1;
            else if(matrix[mid][col-1]<target)
                start = mid + 1;
            else
                break;
        }
        if(start > end)
            return false;
        int targetRow = mid;
        start=0;
        end = col - 1;
        //note start <= end
        while(start<=end){
            mid = (start+end)/2;
            if(matrix[targetRow][mid]<target)
                start = mid+1;
            else if(matrix[targetRow][mid]>target)
                end = mid-1 ;
            else
                return true;
        }
        //note need this return when can not find the target!!!!!!!!
        return false;
            
    }


max sub array
 /* it depends on whether the sum of previous elements is negative or positive.
    *  if it's negative, then it will not contribute any to following sums, so discard the
    *  negative sum and reset sum to current element
    *  if it's positive, then it will contribute to the sum of following sums, so add current
    *  element to the sum.
    */
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int len = nums.size();
        int result=nums[0],sum=nums[0];
        for(int i=1; i<len; ++i){
            if(sum<0)
                sum = nums[i];
            else
                sum += nums[i];
            result = max(result,sum);
        }
        return result;
    }

Permutation
public:
/* swap the first node with every following node and caculate the permutation
 * recursively call this method for the remaining nums
 */
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        
        dfs(nums,0, result);
        return result;
    }
private:
    void dfs(vector<int>& nums, int len, vector<vector<int>>& r){
        if(len == nums.size()){
            r.push_back(nums);
            return;
        }
        for(int i=len; i<nums.size(); ++i){
            swap(nums[i], nums[len]);
            dfs(nums, len+1, r);
            swap(nums[i],nums[len]);
        }
    }
};
first resolution: use recursive backtracking
public:
/* use a flag vector to remember which number has been chosen.
 * pick one number and get the permutation of the remaining numbers
 * recursivly call this method
 */
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> path;
        vector<bool> flag(nums.size(), false); //indicate whether the number has been chosen
        
        dfs(nums,flag, path,result);
        return result;
    }
private:
    void dfs(vector<int>& nums, vector<bool>& flag, vector<int>& p, vector<vector<int>>& r){
        if(p.size() == nums.size()){
            r.push_back(p);
            return;
        }
        for(int i=0; i<nums.size(); ++i){
            if(flag[i] == true)
                continue;
            flag[i] = true;
            p.push_back(nums[i]);
        
            dfs(nums, flag, p, r);
            flag[i] = false;
            p.pop_back();
        }
    }

Combination Sum III 
vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> result;
        vector<int> path;
        dfs(k,n,1,path,result);
        return result;
    }
    private:
    void dfs(int k, int n, int index, vector<int>& p, vector<vector<int>>& r){
        if(n == 0 && k == p.size()){
            r.push_back(p);
            return;
        }
        if(k == p.size())
            return;
        for(int i=index; i<=9; ++i){
            //prone, when i>n, there is no solution for this branch!!!!!!
            if(i>n)
                break;
            p.push_back(i);
            //note: here it's i+1 not index+1!!!!!!!!!!!!!!!!
            dfs(k,n-i,i+1,p,r);
            p.pop_back();
        }
    }
