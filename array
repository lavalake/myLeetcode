1. Product of Array Except Self
/*two pass.
 *first pass, calculate all the product of the left
 *second pass, calculate all the product of the right
 */
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
        vector<int> result(nums.size(),1);
        int pro = 1;
        for(int i=0; i< nums.size(); ++i){
            result[i] *= pro;
            pro *= nums[i];
        }
        pro = 1;
        for(int i=nums.size()-1; i>=0; --i){
            result[i] *= pro;
            pro *= nums[i];
        }
        return result;
    }
};

2. Spiral Matrix
https://leetcode.com/discuss/38974/a-concise-c-implementation-based-on-directions
When traversing the matrix in the spiral order, at any time we follow one out of the following four directions: RIGHT DOWN LEFT UP. Suppose we are working on a 5 x 3 matrix as such:

0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

Imagine a cursor starts off at (0, -1), i.e. the position at '0', then we can achieve the spiral order by doing the following:

    Go right 5 times
    Go down 2 times
    Go left 4 times
    Go up 1 times.
    Go right 3 times
    Go down 0 times -> quit

Notice that the directions we choose always follow the order 'right->down->left->up', and for horizontal movements, the number of shifts follows:{5, 4, 3}, and vertical movements follows {2, 1, 0}.

Thus, we can make use of a direction matrix that records the offset for all directions, then an array of two elements that stores the number of shifts for horizontal and vertical movements, respectively. This way, we really just need one for loop instead of four.

Another good thing about this implementation is that: If later we decided to do spiral traversal on a different direction (e.g. Counterclockwise), then we only need to change the Direction matrix; the main loop does not need to be touched.
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;
        if(matrix.empty() || matrix[0].empty())
            return result;
        vector<vector<int>> dirc={{0,1},{1,0},{0,-1},{-1,0}};
        int row = matrix.size();
        int col = matrix[0].size();
        vector<int> steps={col,row-1};
        int drc = 0;
        int rw = 0, cl = -1;
        while(steps[drc%2]){
            for(int i=0; i<steps[drc%2];++i){
                rw += dirc[drc][0];
                cl += dirc[drc][1];
                result.push_back(matrix[rw][cl]);
                
            }
            steps[drc%2]--;
            drc = (drc+1) % 4;
        }
        return result;
    }
};
