1. Binary Tree Inorder Traversal
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<struct TreeNode*> st;
        vector<int> result;
        struct TreeNode* cur = root;
        
        while(cur || !st.empty()){
           
           if(cur){
               
               st.push(cur);
               cur = cur->left;
               
           }else{
               cur = st.top();
               st.pop();
               result.push_back(cur->val);
               cur = cur->right;
           }
           
        }
        return result;
    }

2. Symmetric Tree
first, iterative version. use pair to store the left and right subnode
typedef pair<TreeNode*, TreeNode*> nodepair;
public:
    bool isSymmetric(TreeNode* root) {
        // Level-order BFS.
        queue<nodepair> q;
        if(root)
            q.push(make_pair(root->left,root->right));
        while(q.size()){
            nodepair p=q.front(); q.pop();
            if(p.first){
                if(!p.second)return false;
                if(p.first->val != p.second->val) return false;
                // the order of children pushed to q is the key to the solution.
                q.push(make_pair(p.first->left,p.second->right));
                q.push(make_pair(p.first->right,p.second->left));
            }
            else if(p.second) return false;
        }
        return true;
    }
    
    
recursive version   
public:
    bool isSymmetric(TreeNode* root) {
        if(root == NULL)
            return true;
        return (isSym(root->left,root->right));
    }
    private:
    bool isSym(TreeNode* node1, TreeNode* node2){
        if(node1 == NULL) return node2 == NULL;
        if(node2 == NULL) return false;
        if(node1->val != node2->val) return false;
        return isSym(node1->left, node2->right) && isSym(node1->right, node2->left);
    }

3.Same Tree
 /*use pair to save the corresponding nodes of two tree
    */
    typedef pair<TreeNode*,TreeNode*> nodePair;
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        queue<nodePair> pq;
        pq.push(make_pair(p,q));
        while(!pq.empty()){
            nodePair np = pq.front();
            pq.pop();
            if(np.first==NULL && np.second==NULL)
                continue;
            if(np.first==NULL || np.second==NULL)
                return false;
            if(np.first->val != np.second->val)
                return false;
            pq.push(make_pair(np.first->left,np.second->left));
            pq.push(make_pair(np.first->right,np.second->right));
        }
        return true;
    }

/*use post order traversal because post oder will visit left and right first
    * this property meet the requirement when we visti the left and right, we can
    * back track
    */
    Following is detailed algorithm.

1.1 Create an empty stack
2.1 Do following while root is not NULL
    a) Push root's right child and then root to stack.
    b) Set root as root's left child.
2.2 Pop an item from stack and set it as root.
    a) If the popped item has a right child and the right child 
       is at top of stack, then remove the right child from stack,
       push the root back and set root as root's right child.
    b) Else print root's data and set root as NULL.
2.3 Repeat steps 2.1 and 2.2 while stack is not empty.
http://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/
public:
    bool hasPathSum(TreeNode* root, int sum) {
        stack<TreeNode*> st;
        TreeNode* itr = root;
        while(itr != NULL || !st.empty()){
            while(itr != NULL){
                if(itr->right != NULL)
                    st.push(itr->right);
                st.push(itr);
                sum -= itr->val;
                itr = itr->left;
            }
            TreeNode* temp = st.top();
            st.pop();
            if(temp->left == NULL && temp->right == NULL && sum == 0)
                return true;
            if(temp->right && !st.empty() && temp->right == st.top()){
                itr = st.top();
                st.pop();
                st.push(temp);
            }else{
                sum += temp->val;

            }
        }
        return false;
    }
    
6. Balanced Binary Tree
bottom up use dfs,O(n)
public:
    bool isBalanced(TreeNode* root) {
        if(dfs(root) == -1) return false;
        else return true;
    }
    private:
    int dfs(TreeNode* root){
        if(root == NULL)
            return 0;
        int leftH = dfs(root->left);
        if(leftH == -1)
            return -1;
        int rightH = dfs(root->right);
        if(rightH == -1)
            return -1;
        if(abs(leftH-rightH) > 1)
            return -1;
        return max(leftH, rightH)+1;
    }

7. Lowest Common Ancestor of a Binary Search Tree 
/* bst the property that left is less than root and right is larg than root
 * so only need to find the first root that the two node reside in two side
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        while((root->val-p->val) * (root->val-q->val) > 0){
        
            root = (root->val-p->val)>0?root->left:root->right;
        }
        return root;
    }
};


8.Unique Binary Search Trees
G(n) = F(1, n) + F(2, n) + ... + F(n, n). 
https://leetcode.com/discuss/24282/dp-solution-in-6-lines-with-explanation-f-i-n-g-i-1-g-n-i
public:
    int numTrees(int n) {
        vector<int> sum(n+1,0);
        sum[0] = 1;
        sum[1] = 1;
        for(int i=2; i<=n; ++i){
            for(int j=1; j<=i; ++j){
                sum[i] += sum[j-1]*sum[i-j];
            }
        }
        return sum[n];
    }

9.Flatten Binary Tree to Linked List
class Solution {
    /*use pre order
    */
public:
    void flatten(TreeNode* root) {
        stack<TreeNode*> st;
        if(!root)
            return ;
        st.push(root);
        while(!st.empty()){
            TreeNode *cur = st.top();
            st.pop();
            if(cur->right)
                st.push(cur->right);
            if(cur->left)
                st.push(cur->left);
            cur->left = NULL;
            st.empty()?cur->right = NULL:cur->right = st.top();
        }
    }
};

class Solution {
    /*O(1) space, no need stack. Note, the right most node of the left
     * tree is the pre node of the right tree.
    */
public:
    void flatten(TreeNode* root) {
        TreeNode *now = root;
        while(now){
            if(now->left){
                TreeNode *pre = now->left;
                while(pre->right)
                    pre = pre->right;
                pre->right = now->right;
                now->right = now->left;
                now->left = NULL;
            }
            now = now->right;
        }
    }
};

10. Count Complete Tree Nodes
class Solution {
public:
    int countNodes(TreeNode* root) {
         int lh=0, rh=0;
         
        TreeNode *left = root;
        TreeNode *right = root;
         while(left){
             ++lh;
             left = left->left;
         } 
         while(right){
             ++rh;
             right = right->right;
         } 
         if(lh == rh) return pow(2,lh)-1;
         return countNodes(root->left) + countNodes(root->right) + 1;
         
    }
};

11. Construct Binary Tree from Preorder and Inorder Traversal
class Solution {
    //typedef vector<int>::iterator itr;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        return buildSubTree(preorder.begin(),preorder.end(),inorder.begin(),inorder.end());
    }
    private:
    /*note, here end is exclusive.[start,end). so end need move 1 furthr
    */
    template<typename itr>
    TreeNode* buildSubTree(itr pre_start, itr pre_end, itr in_start, itr in_end){
        
        if(pre_start == pre_end) return nullptr;
        TreeNode *root = new TreeNode(*pre_start);
        auto pos = find(in_start, in_end, *pre_start);
        auto dist = distance(in_start,pos);
        root->left = buildSubTree(next(pre_start),next(pre_start,dist+1), in_start, pos);
        root->right = buildSubTree(next(pre_start,dist+1),pre_end, next(pos), in_end);
        return root;
    }
};
