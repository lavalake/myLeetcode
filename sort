1. sort color
this is similar with quick sort but not identical.
because quick sort will not take care the same value with the pivot.
the same value may lie in the left or right half.
for this case, the pivot must in the midle.
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int start=0, end=nums.size()-1;
        int cur = 0;
        while(cur<=end){
            int i = nums[cur];
            if(i < 1 && start!=cur){
                swap(nums[start++],nums[cur]);
                
            }
            else if(i > 1)
                swap(nums[end--],nums[cur]);
               
            else
                ++cur;
        }
    }
};

2. largest number
http://fusharblog.com/3-ways-to-define-comparison-functions-in-cpp/
http://stackoverflow.com/questions/13801311/compare-function-in-a-class-for-stdsort-cant-compile
The problem is that your cmp method needs to be static. The reason is that non-static methods
expect an invisible first argument, the this pointer. The std::sort function do not pass this extra argument.
class Solution {
    /*use custome compare function for the sort()
     *the custome compare function must be static
     */
public:
    string largestNumber(vector<int>& nums) {
        vector<string> str;
        for(auto i:nums){
            str.push_back(to_string(i));
        }
        sort(str.begin(),str.end(),compareFun);
        string result;
        for(auto i:str){
            result.append(i);
        }
        if(result.find_first_not_of('0') == string::npos)
            return "0";
        return result;
    }

private:
 static bool compareFun(const string& num1, const string& num2){
        
        return num1+num2>num2+num1;
    }
};

3. merge intervals
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        sort(intervals.begin(),intervals.end(),compareFunc);
        vector<Interval> result;
        for(auto itv:intervals){
            if(result.empty() || itv.start > result.back().end)
                result.push_back(itv);
            else if(itv.end > result.back().end){
                /*can use back to access the variable*/
                result.back().end = itv.end;
            }else{
                
            }
        }
        return result;
    }
private:
    static bool compareFunc(Interval n, Interval m){
        return (n.start < m.start);
    }
};
