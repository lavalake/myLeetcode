1. Valid Anagram
note i:map return pair and find() return iterator!!!!!!!!
Iterator work as pointer.!!!!!!!
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())
            return false;
        unordered_map<char,int> map_s;
        unordered_map<char,int> map_t;
        for(auto i:s){
            if(map_s.count(i) == 0)
                map_s[i] = 1;
            else
                map_s[i] += 1;
        }
        for(auto j:t){
            if(map_t.count(j) == 0)
                map_t[j] = 1;
            else
                map_t[j] += 1;
        }
        /*note!!!!this return pair*/
        for(auto i:map_s){
        /*note this return iterator*/
            auto p = map_t.find(i.first);
            
            if(p != map_t.end()){
                if(p->second != i.second)
                    return false;
            }else{
                return false;
            }
        }
        return true;
    }
};
use one map version
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())
            return false;
        unordered_map<char,int> map_s;

        for(auto i:s){
            if(map_s.count(i) == 0)
                map_s[i] = 1;
            else
                map_s[i] += 1;
        }
        for(auto j:t){
            if(map_s.count(j) == 0)
                return false;
            else
                map_s[j] -= 1;
        }
        /*note!!!!this return pair*/
        for(auto i:map_s){
        /*note this return iterator*/
            if(i.second != 0)
                return false;
        }
        return true;
    }
};


2.1. count prime
class Solution {
    /*http://www.geeksforgeeks.org/sieve-of-eratosthenes/
    
    Create a list of consecutive integers from 2 to n: (2, 3, 4, â€¦, n).
    Initially, let p equal 2, the first prime number.
    Starting from p, count up in increments of p and mark each of these numbers greater than p itself in the list. These numbers will be 2p, 3p, 4p, etc.; note that some of them may have already been marked.
    Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let p now equal this number (which is the next prime), and repeat from step 3.
*/
public:
    int countPrimes(int n) {
        int upper = sqrt(n);
        int sum = 0;
        vector<int> isPrime(n,1);
        for(int i=2; i<n; ++i){
            if(isPrime[i-1])
                ++sum;
            if(i>upper)
                continue;
            for(int j=i; i*j<n; ++j){
                isPrime[i*j-1] = 0;
            }
        }
        return sum;
    }
};
