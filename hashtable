1. Valid Anagram
note i:map return pair and find() return iterator!!!!!!!!
Iterator work as pointer.!!!!!!!
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())
            return false;
        unordered_map<char,int> map_s;
        unordered_map<char,int> map_t;
        for(auto i:s){
            if(map_s.count(i) == 0)
                map_s[i] = 1;
            else
                map_s[i] += 1;
        }
        for(auto j:t){
            if(map_t.count(j) == 0)
                map_t[j] = 1;
            else
                map_t[j] += 1;
        }
        /*note!!!!this return pair*/
        for(auto i:map_s){
        /*note this return iterator*/
            auto p = map_t.find(i.first);
            
            if(p != map_t.end()){
                if(p->second != i.second)
                    return false;
            }else{
                return false;
            }
        }
        return true;
    }
};
use one map version
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size())
            return false;
        unordered_map<char,int> map_s;

        for(auto i:s){
            if(map_s.count(i) == 0)
                map_s[i] = 1;
            else
                map_s[i] += 1;
        }
        for(auto j:t){
            if(map_s.count(j) == 0)
                return false;
            else
                map_s[j] -= 1;
        }
        /*note!!!!this return pair*/
        for(auto i:map_s){
        /*note this return iterator*/
            if(i.second != 0)
                return false;
        }
        return true;
    }
};
