1. reverse number
class Solution {
public:
/* tow points to note
 * 1. if x is negtive, x%10 is negtive too!!!!!!!!!!!!!!!
 * 2. need to check whether reversed number is overflow
 */
    int reverse(int x) {
        
        int rev=0;
        while(x){
            /*check overflow*/
            if(rev > INT_MAX/10 || rev < INT_MIN/10)
                return 0;
            rev = rev*10+x%10;
            x=x/10;
        }
        return rev;
    }
};

2.Basic Calculator
Example: 7 - ( 6 - 5 - ( 4 - 3 ) - 2 ) - ( 1 )
Result: + 7 - 6 + 5 + 4 - 3 + 2 - 1
The + - are signs just before '('. They are dealt with previous stack sign. 
Then they are saved in the stack to help decide the signs in the following "(..)" .
class Solution {
public:
    int calculate(string s) {
        stack<int> t;  //previous sign just before the '('
        t.push(1);  //for all the signs those are not in the parentheses
        int sum=0, temp=0, lastSign=1;
        for(auto c: s)
        {
            if(c=='(') t.push(lastSign); //save the sign just before the '('
            else if(c==')') t.pop();

            if(c>='0' && c<='9'){  
                temp=temp*10+c-'0';
            }

            if(c=='-'||c=='+'){
                sum+=lastSign*temp; //calculate the number before current sign
                temp=0;
                lastSign=(c=='-'?-1:1)*t.top();  //deal with the stack influencing sign
            }
        }
        sum+=lastSign*temp; //calculate the last number
        return sum;
    }
};
