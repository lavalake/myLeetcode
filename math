1. reverse number
class Solution {
public:
/* tow points to note
 * 1. if x is negtive, x%10 is negtive too!!!!!!!!!!!!!!!
 * 2. need to check whether reversed number is overflow
 */
    int reverse(int x) {
        
        int rev=0;
        while(x){
            /*check overflow*/
            if(rev > INT_MAX/10 || rev < INT_MIN/10)
                return 0;
            rev = rev*10+x%10;
            x=x/10;
        }
        return rev;
    }
};

2.Basic Calculator
Example: 7 - ( 6 - 5 - ( 4 - 3 ) - 2 ) - ( 1 )
Result: + 7 - 6 + 5 + 4 - 3 + 2 - 1
The + - are signs just before '('. They are dealt with previous stack sign. 
Then they are saved in the stack to help decide the signs in the following "(..)" .
class Solution {
public:
    int calculate(string s) {
        stack<int> t;  //previous sign just before the '('
        t.push(1);  //for all the signs those are not in the parentheses
        int sum=0, temp=0, lastSign=1;
        for(auto c: s)
        {
            if(c=='(') t.push(lastSign); //save the sign just before the '('
            else if(c==')') t.pop();

            if(c>='0' && c<='9'){  
                temp=temp*10+c-'0';
            }

            if(c=='-'||c=='+'){
                sum+=lastSign*temp; //calculate the number before current sign
                temp=0;
                lastSign=(c=='-'?-1:1)*t.top();  //deal with the stack influencing sign
            }
        }
        sum+=lastSign*temp; //calculate the last number
        return sum;
    }
};


3.Basic Calculator II 
https://leetcode.com/discuss/41557/c-52ms-use-two-stacks
http://www.geeksforgeeks.org/expression-evaluation/
1. While there are still tokens to be read in,
   1.1 Get the next token.
   1.2 If the token is:
       1.2.1 A number: push it onto the value stack.
       1.2.2 A variable: get its value, and push onto the value stack.
       1.2.3 A left parenthesis: push it onto the operator stack.
       1.2.4 A right parenthesis:
         1 While the thing on top of the operator stack is not a 
           left parenthesis,
             1 Pop the operator from the operator stack.
             2 Pop the value stack twice, getting two operands.
             3 Apply the operator to the operands, in the correct order.
             4 Push the result onto the value stack.
         2 Pop the left parenthesis from the operator stack, and discard it.
       1.2.5 An operator (call it thisOp):
         1 While the operator stack is not empty, and the top thing on the
           operator stack has the same or greater precedence as thisOp,
           1 Pop the operator from the operator stack.
           2 Pop the value stack twice, getting two operands.
           3 Apply the operator to the operands, in the correct order.
           4 Push the result onto the value stack.
         2 Push thisOp onto the operator stack.
2. While the operator stack is not empty,
    1 Pop the operator from the operator stack.
    2 Pop the value stack twice, getting two operands.
    3 Apply the operator to the operands, in the correct order.
    4 Push the result onto the value stack.
3. At this point the operator stack should be empty, and the value
   stack should have only one value in it, which is the final result.
   
   class Solution {
public:
    int calculate(string s) {
        stack<int> nums;
        stack<char> op;
        int sum=0;
        char curOp;
        for(int i=0; i<s.size(); ++i){
            if(s[i] == ' ') continue;
            if(s[i] >= '0' && s[i] <= '9'){
                int curNum = 0;
                while(i<s.size() && s[i] >= '0' && s[i] <= '9'){
                    curNum = curNum*10 + s[i++] -'0';
                }
                --i;
                nums.push(curNum);
                
            } 
            else {
                
                    while(hasPrecedence(op,s[i])){
                        int num1 = nums.top();
                        nums.pop();
                        int num2 = nums.top();
                        nums.pop();
                        
                        curOp = op.top();
                        op.pop();
                        
                        int temp = applyOp(curOp,num1,num2);
                        nums.push(temp);
                    }
               
                
                op.push(s[i]);
            }
        }
       
        while(!op.empty()){
            
            int num1 = nums.top();
            nums.pop();
            int num2 = nums.top();
            nums.pop();
            curOp = op.top();
            op.pop();
            if(curOp == '*'){
                sum = num1*num2;
            }else if(curOp == '/'){
                sum = num2/num1;
            }else{
                int sign = curOp=='+'?1:-1;
                sum = num2+sign*num1;
            }
            nums.push(sum);
        }
        if(!nums.empty())
            sum = nums.top();
        return sum;
    }
    private:
    int applyOp(char op, int num1, int num2){
        int out=0;
        switch(op){
            case '+':
                out = num1 + num2;
                break;
            case '-':
                out = num2 - num1;
                break;
            case '*':
                out = num1*num2;
                break;
            case '/':
                out = num2-num1;
                break;
        }
        return out;
    }
    bool hasPrecedence(const stack<char>& op_st, const char& op){
        if(op_st.empty())
            return false;
        if(op_st.top() == '*' || op_st.top() == '/')
            return true;
        if(op == '+' || op == '-')
            return true;
        
        return false;
    }
};
