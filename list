1.reverse list
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *cur=NULL, *next=NULL, *pre = NULL;
        if(head)
            cur = head;
        
        while(cur){
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};

2.Remove Nth Node From End of List
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *first=head, *second=head, dummy(0),*pre;
        dummy.next = head;
        pre = &dummy;
        for(int i=0; i<n; i++){
            first = first->next;
        }
        while(first){
            first = first->next;
            second = second->next;
            pre = pre->next;
        }
        pre->next = second->next;
        return dummy.next;
    }
};

3. merge sorted list
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head)
            return head;
        return mergeSort(head);
    }
    private:
    ListNode* mergeSort(ListNode *head){
        if(!head->next)
            return head;
        ListNode *fast=head,*slow=head,*pre=nullptr;
        ListNode *left=nullptr,*right=nullptr;
        while(fast){
            fast = fast->next;
            if(fast)
                fast = fast->next;
            pre=slow;
            slow = slow->next;
        }
        pre->next = nullptr;
        left = mergeSort(head);
        right = mergeSort(slow);
        return merge(left,right);
    }
    ListNode* merge(ListNode* l, ListNode* r){
        ListNode dummy(-1);
        ListNode *cur = &dummy;
        while(l && r){
            if(l->val <= r->val){
                cur->next = l;
                cur = l;
                l = l->next;
            }else{
                cur->next = r;
                cur = r;
                r = r->next;
            }
        }
        cur->next = l?l:r;
        return dummy.next;
    }
};


4. reorder list
class Solution {
public:
    void reorderList(ListNode* head) {
        ListNode *fast=head, *slow=head, *pre=nullptr;
        while(fast){
            fast = fast->next;
            if(fast)
                fast = fast->next;
            pre = slow;
            slow = slow->next;
        }
        if(pre)
            pre->next = nullptr;
        ListNode *reverse_head = reverse(slow);
        merge(head,reverse_head);
    }
private:
    ListNode* reverse(ListNode* head){
        ListNode *pre=nullptr, *cur = head, *next = nullptr;
        while(cur){
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
    ListNode *merge(ListNode *head1, ListNode *head2){
        ListNode *head = head1, *cur, dummy(-1);
        cur = &dummy;
        while(head1 && head2){
            
            cur->next = head1;
            head1 = head1->next;
            cur = cur->next;
            cur->next = head2;
            head2 = head2->next;
            /*!!!!!!!!!remember this, cur=cur->next!!!!!!!*/
            cur = cur->next;
        }
        cur->next = head1?head1:head2;
        return dummy.next;
    }
};

5. Remove Duplicates from Sorted List II 
/*compare with pre and next. if not equal, link to the list*/
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode *cur=head, *next=head->next,*pre=nullptr;
        ListNode *start, dummy(0);
        start = &dummy;
        
        while(cur){
            if((!pre || pre->val != cur->val) && (!next || next->val != cur->val)){
                start->next = cur;
                start = cur;
            }
            pre = cur;
            cur = next;
            if(cur)
                next = cur->next;
        }
        start->next = nullptr;
        return dummy.next;
    }
};


6.Partition List
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *less=nullptr, *large=nullptr;
        ListNode dummy1(-1),dummy2(-1);
        less = &dummy1;
        large = &dummy2;
        while(head){
            if(head->val < x){
                less->next = head;
                less = head;
            }else{
                large->next = head;
                large = head;
            }
            head = head->next;
                
        }
        less->next = dummy2.next;
        large->next = nullptr;
        return dummy1.next;
    }
};


7. Convert Sorted List to Binary Search Tree
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        ListNode *fast=head, *slow=head, *pre=nullptr,dummy(-1);
        TreeNode *root = new TreeNode(-1);
        dummy.next = head;
        pre = &dummy;
        if(!head)
            return nullptr;
        while(fast && fast->next){
            fast = fast->next->next;
            pre = slow;
            slow = slow->next;
        }
        
        pre->next=nullptr;
        root->val = slow->val;
        root->left = sortedListToBST(dummy.next);
        root->right = sortedListToBST(slow->next);
        return root;
        
    }
};

8. Reverse Nodes in k-Group
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *pre, dummy(-1), *start=head,* end=head;
        dummy.next = head;
        pre = &dummy;
        while(1){
            ListNode *newStart=nullptr;
            /*note!!this should be k-1. because if k is 1, we do not need to reverse anything*/
            int i=k-1;
            while(end && i){
                end = end->next;
                --i;
            }
            if(i || !end)
                break;
            pre->next = end;
            pre = start;
            newStart = end->next;
            reverse(start,end);
            start = newStart;
            end = newStart;
        }
        /*do not forget to handle the remaining nodes which is not divided by K!!!!!!!!!!*/
        pre->next = start;
        return dummy.next;
    }
private:
    void reverse(ListNode *s, ListNode *e){
        ListNode *pre = nullptr,*cur = s;
        while(pre != e){
            ListNode *next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
    }
};


9.Add Two Numbers
class Solution {
    /*1. add two digits until one list reach end
     *2. if any list is not end, continue add the list with the carry bit
     *3. 
    */
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *num1, *num2, *sum, dummy(-1);

        num1=l1;
        num2=l2;
        ListNode *pre = &dummy;
        int carry=0;
        while(num1 && num2){
            sum = new ListNode((num1->val+num2->val+carry)%10);
            carry = (num1->val+num2->val+carry)/10;
            pre->next = sum;
            pre = sum;
            num1=num1->next;
            num2=num2->next;
        }
        ListNode *num = num1?num1:num2;
        /*note, if num not null or carry not 0, should continue*/
        while(num || carry){
            if(num){
                sum = new ListNode((num->val + carry)%10);
                carry = (num->val + carry)/10;
                num = num->next;
            }else{
                sum = new ListNode(carry);
                carry = 0;
            }
            
            pre->next = sum;
            pre = sum;
            
        }
        /*do forget set nullptr*/
        pre->next = nullptr;
        

        return dummy.next;
        
    }

};
