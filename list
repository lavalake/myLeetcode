1.reverse list
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *cur=NULL, *next=NULL, *pre = NULL;
        if(head)
            cur = head;
        
        while(cur){
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};

2.Remove Nth Node From End of List
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *first=head, *second=head, dummy(0),*pre;
        dummy.next = head;
        pre = &dummy;
        for(int i=0; i<n; i++){
            first = first->next;
        }
        while(first){
            first = first->next;
            second = second->next;
            pre = pre->next;
        }
        pre->next = second->next;
        return dummy.next;
    }
};

3. merge sorted list
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head)
            return head;
        return mergeSort(head);
    }
    private:
    ListNode* mergeSort(ListNode *head){
        if(!head->next)
            return head;
        ListNode *fast=head,*slow=head,*pre=nullptr;
        ListNode *left=nullptr,*right=nullptr;
        while(fast){
            fast = fast->next;
            if(fast)
                fast = fast->next;
            pre=slow;
            slow = slow->next;
        }
        pre->next = nullptr;
        left = mergeSort(head);
        right = mergeSort(slow);
        return merge(left,right);
    }
    ListNode* merge(ListNode* l, ListNode* r){
        ListNode dummy(-1);
        ListNode *cur = &dummy;
        while(l && r){
            if(l->val <= r->val){
                cur->next = l;
                cur = l;
                l = l->next;
            }else{
                cur->next = r;
                cur = r;
                r = r->next;
            }
        }
        cur->next = l?l:r;
        return dummy.next;
    }
};
